"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  IconPlus,
  IconFilter,
  IconSearch,
  IconEye,
  IconEdit,
  IconTrash,
  IconClock,
  IconUser,
  IconHome,
  IconCurrencyDollar,
  IconCalendar,
  IconAlertCircle,
  IconChevronLeft,
  IconChevronRight,
  IconChartBar,
  IconClipboard,
  IconLoader,
  IconX,
  IconFileText,
} from "@tabler/icons-react";

import { useTranslation } from "@/hooks/useTranslation";
import { useDeals, useActivityJournal } from "@/hooks/useDeals";
import { Deal, UpdateDealRequest } from "@/lib/api-client";
import DealFormModal from "@/components/crm/deal-form-modal";
import DealDetailsModal from "@/components/crm/deal-details-modal";
import { useUsers } from "@/hooks/useUsers";
import { useProperties } from "@/hooks/useProperties";

// –¢–∏–ø–∏ —Ç–∞ —Å—Ç–∞—Ç—É—Å–∏ —É–≥–æ–¥ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑ API)
type DealType = "sale" | "rent" | "purchase";
type DealStatus = "active" | "pending" | "completed" | "cancelled" | "on_hold";
type DealPriority = "high" | "medium" | "low";

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è Deal –∑ API
interface DealDisplay {
  id: string;
  title: string;
  type: DealType;
  status: DealStatus;
  priority: DealPriority;
  client: string;
  property: string;
  value: number;
  createdAt: Date;
  updatedAt: Date;
  closingDate?: Date;
  responsibleAgent: string;
  description?: string;
  currency: string;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó Deal –∑ API –≤ DealDisplay (–ø–µ—Ä–µ–º—ñ—Å—Ç–∏–º–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)

const statusLabels: Record<DealStatus, string> = {
  active: "–ê–∫—Ç–∏–≤–Ω–∞",
  pending: "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è",
  completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
  cancelled: "–°–∫–∞—Å–æ–≤–∞–Ω–∞",
  on_hold: "–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞",
};

const typeLabels: Record<DealType, string> = {
  sale: "–ü—Ä–æ–¥–∞–∂",
  rent: "–û—Ä–µ–Ω–¥–∞",
  purchase: "–ö—É–ø—ñ–≤–ª—è",
};

const priorityLabels: Record<DealPriority, string> = {
  high: "–í–∏—Å–æ–∫–∞",
  medium: "–°–µ—Ä–µ–¥–Ω—è",
  low: "–ù–∏–∑—å–∫–∞",
};

const statusColors: Record<DealStatus, string> = {
  active: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
  pending: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300",
  completed: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
  cancelled: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  on_hold: "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300",
};

const priorityColors: Record<DealPriority, string> = {
  high: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  medium: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300",
  low: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
};

export function DealsSection() {
  const { t } = useTranslation();
  const { 
    deals: apiDeals, 
    loading, 
    error, 
    fetchDeals, 
    createDeal,
    updateDeal, 
    deleteDeal,
    totalDeals,
    totalPages,
    currentPage 
  } = useDeals();
  
  const { 
    entries: activityEntries, 
    fetchActivityJournal,
    createActivityEntry 
  } = useActivityJournal();

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö—É–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–º–µ–Ω
  const { users, fetchUsers } = useUsers();
  const { properties, fetchProperties } = useProperties();
  
  const [isMounted, setIsMounted] = useState(false);
  const [deals, setDeals] = useState<DealDisplay[]>([]);
  const [filteredDeals, setFilteredDeals] = useState<DealDisplay[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState<DealStatus | "all">("all");
  const [filterType, setFilterType] = useState<DealType | "all">("all");
  const [showFilters, setShowFilters] = useState(false);
  const [showActivityJournal, setShowActivityJournal] = useState(false);
  const [sortBy, setSortBy] = useState<
    "createdAt" | "value" | "updatedAt" | "closingDate"
  >("updatedAt");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
  const [showDealModal, setShowDealModal] = useState(false);
  const [editingDeal, setEditingDeal] = useState<Deal | null>(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedDeal, setSelectedDeal] = useState<Deal | null>(null);

  // –ï—Ñ–µ–∫—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —É–≥–æ–¥ –∑ API
  useEffect(() => {
    console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É–≥–æ–¥–∏ –∑ API:', apiDeals);
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ undefined/null –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é
    const validDeals = apiDeals.filter(deal => deal != null);
    const convertedDeals = validDeals.map(dealToDisplay);
    console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ —É–≥–æ–¥–∏:', convertedDeals);
    setDeals(convertedDeals);
  }, [apiDeals, users.length, properties.length]); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ length –∑–∞–º—ñ—Å—Ç—å –º–∞—Å–∏–≤—ñ–≤

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –æ–±'—î–∫—Ç–∏ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    if (users.length === 0) {
      fetchUsers();
    }
    if (properties.length === 0) {
      fetchProperties();
    }
  }, []); // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–±—É–ª–æ—Å—è –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω
  const getUserName = (userId: string) => {
    const user = users.find((u: any) => u._id === userId || u.id === userId);
    return user ? `${user.first_name} ${user.last_name}` : userId ? `–ö–ª—ñ—î–Ω—Ç ${userId.substring(0, 8)}` : '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç';
  };

  const getPropertyName = (propertyId: string) => {
    const property = properties.find((p: any) => p._id === propertyId || p.id === propertyId);
    return property ? `${property.title} - ${(property as any).city}` : propertyId ? `–û–±'—î–∫—Ç ${propertyId.substring(0, 8)}` : '–ù–µ–≤—ñ–¥–æ–º–∏–π –æ–±\'—î–∫—Ç';
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó Deal –∑ API –≤ DealDisplay
  const dealToDisplay = (deal: Deal): DealDisplay => {
    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ undefined/null
    if (!deal) {
      console.warn('üö® dealToDisplay: –æ—Ç—Ä–∏–º–∞–Ω–æ undefined/null deal');
      return {
        id: 'unknown',
        title: '–ù–µ–≤—ñ–¥–æ–º–∞ —É–≥–æ–¥–∞',
        type: 'sale',
        status: 'active',
        priority: 'medium',
        client: '–ù–µ–≤—ñ–¥–æ–º–æ',
        property: '–ù–µ–≤—ñ–¥–æ–º–æ',
        value: 0,
        createdAt: new Date(),
        updatedAt: new Date(),
        responsibleAgent: '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        description: '',
        currency: 'UAH',
      };
    }

    // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ –ø–æ–ª—ñ–≤ –∑ API
    const apiDeal = deal as any; // –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ any –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤ API
    
    return {
      id: apiDeal._id || deal.id,
      title: deal.title || `${typeLabels[apiDeal.type as DealType] || '–£–≥–æ–¥–∞'} - ${getUserName(deal.client_id || '')}`,
      type: apiDeal.type || deal.deal_type || 'sale',
      status: deal.status || 'active',
      priority: deal.priority || 'medium',
      client: getUserName(deal.client_id || ''),
      property: getPropertyName(deal.property_id || ''),
      value: apiDeal.price || deal.value || 0,
      createdAt: new Date(deal.created_at),
      updatedAt: new Date(deal.updated_at),
      closingDate: deal.actual_close_date ? new Date(deal.actual_close_date) : 
                    apiDeal.expected_close_date ? new Date(apiDeal.expected_close_date) : undefined,
      responsibleAgent: deal.responsible_agent || '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
      description: deal.description || apiDeal.notes,
      currency: deal.currency || 'UAH',
    };
  };

  // –ï—Ñ–µ–∫—Ç –¥–ª—è –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // –ï—Ñ–µ–∫—Ç –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥
  useEffect(() => {
    let result = [...deals];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º
    if (searchTerm) {
      result = result.filter(
        (deal) =>
          deal.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          deal.client.toLowerCase().includes(searchTerm.toLowerCase()) ||
          deal.property.toLowerCase().includes(searchTerm.toLowerCase()) ||
          deal.responsibleAgent.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (filterStatus !== "all") {
      result = result.filter((deal) => deal.status === filterStatus);
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–æ–º
    if (filterType !== "all") {
      result = result.filter((deal) => deal.type === filterType);
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    result.sort((a, b) => {
      let aValue: any;
      let bValue: any;

      switch (sortBy) {
        case "createdAt":
          aValue = a.createdAt.getTime();
          bValue = b.createdAt.getTime();
          break;
        case "updatedAt":
          aValue = a.updatedAt.getTime();
          bValue = b.updatedAt.getTime();
          break;
        case "value":
          aValue = a.value;
          bValue = b.value;
          break;
        case "closingDate":
          aValue = a.closingDate?.getTime() || 0;
          bValue = b.closingDate?.getTime() || 0;
          break;
        default:
          aValue = a.updatedAt.getTime();
          bValue = b.updatedAt.getTime();
      }

      return sortDirection === "desc" ? bValue - aValue : aValue - bValue;
    });

    setFilteredDeals(result);
  }, [deals, searchTerm, filterStatus, filterType, sortBy, sortDirection]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —É–≥–æ–¥–∏
  const handleCreateDeal = () => {
    setEditingDeal(null);
    setShowDealModal(true);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É–≥–æ–¥–∏
  const handleEditDeal = (deal: DealDisplay) => {
    // –ó–Ω–∞–π–¥–µ–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —É–≥–æ–¥—É –∑ API
    const originalDeal = apiDeals.find(d => (d as any)._id === deal.id || d.id === deal.id);
    if (originalDeal) {
      setEditingDeal(originalDeal);
      setShowDealModal(true);
    }
  };

  const handleViewDeal = (deal: DealDisplay) => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —É–≥–æ–¥—É –∑ API
    const originalDeal = apiDeals.find(d => (d as any)._id === deal.id || d.id === deal.id);
    if (originalDeal) {
      setSelectedDeal(originalDeal);
      setShowDetailsModal(true);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∞–±–º—ñ—Ç—É –º–æ–¥–∞–ª–∫–∏
  const handleDealSubmit = async (dealData: any) => {
    try {
      if (editingDeal) {
        // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —É–≥–æ–¥–∏
        const updatedDeal = await updateDeal(editingDeal.id, dealData);
        if (updatedDeal) {
          setShowDealModal(false);
          setEditingDeal(null);
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É–≥–æ–¥
          await fetchDeals();
        }
      } else {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —É–≥–æ–¥–∏
        const newDeal = await createDeal(dealData);
        if (newDeal) {
          setShowDealModal(false);
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É–≥–æ–¥
          await fetchDeals();
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —É–≥–æ–¥–∏:', error);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É–≥–æ–¥–∏
  const handleDeleteDeal = async (dealId: string) => {
    if (window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —É–≥–æ–¥—É?")) {
      const success = await deleteDeal(dealId);
      if (success) {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É–≥–æ–¥ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        await fetchDeals();
      }
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
  const formatCurrency = (amount: number, currency: string) => {
    const formatter = new Intl.NumberFormat('uk-UA', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    });
    
    const symbols: Record<string, string> = {
      UAH: '‚Ç¥',
      USD: '$',
      EUR: '‚Ç¨',
    };
    
    return `${formatter.format(amount)} ${symbols[currency] || currency}`;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("uk-UA", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(date);
  };

  // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
  const handlePageChange = (page: number) => {
    fetchDeals({ page, limit: 10 });
  };

  if (!isMounted) {
    return null;
  }

  // –§—É–Ω–∫—Ü—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ selectedDeal —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É —É–≥–æ–¥—É

    return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="flex flex-col gap-3 sm:gap-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4">
            <div>
            <h1 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">
              –£–≥–æ–¥–∏
            </h1>
            <p className="text-sm sm:text-base text-gray-600 dark:text-gray-400 hidden sm:block">
              –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–≥–æ–¥–∞–º–∏ —Ç–∞ –∂—É—Ä–Ω–∞–ª–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            </p>
          </div>

          <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2 sm:gap-3">
            <button
              onClick={() => setShowActivityJournal(!showActivityJournal)}
              className="flex items-center justify-center gap-2 px-3 sm:px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 text-sm"
            >
              <IconClipboard className="h-4 w-4" />
              <span className="hidden sm:inline">–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</span>
              <span className="sm:hidden">–ñ—É—Ä–Ω–∞–ª</span>
            </button>
            <button
              onClick={() => handleCreateDeal()}
              className="flex items-center justify-center gap-2 px-3 sm:px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 text-sm"
            >
              <IconPlus className="h-4 w-4" />
              <span className="hidden sm:inline">–ù–æ–≤–∞ —É–≥–æ–¥–∞</span>
              <span className="sm:hidden">–ù–æ–≤–∞</span>
            </button>
          </div>
        </div>

        {/* –ú–æ–±—ñ–ª—å–Ω–∏–π –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="sm:hidden">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–≥–æ–¥–∞–º–∏ —Ç–∞ –∂—É—Ä–Ω–∞–ª–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
          </p>
        </div>
      </div>

      {/* –ü–æ—à—É–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="flex flex-col sm:flex-row gap-4">
          {/* –ü–æ—à—É–∫ */}
          <div className="flex-1">
            <div className="relative">
              <IconSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="–ü–æ—à—É–∫ —É–≥–æ–¥..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ */}
            <button
            onClick={() => setShowFilters(!showFilters)}
            className="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            <IconFilter className="h-4 w-4" />
            –§—ñ–ª—å—Ç—Ä–∏
            </button>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ */}
        {showFilters && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700"
          >
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">–°—Ç–∞—Ç—É—Å</label>
                <select
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value as DealStatus | "all")}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700"
                >
                  <option value="all">–£—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                  {Object.entries(statusLabels).map(([value, label]) => (
                    <option key={value} value={value}>{label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">–¢–∏–ø —É–≥–æ–¥–∏</label>
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value as DealType | "all")}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700"
                >
                  <option value="all">–£—Å—ñ —Ç–∏–ø–∏</option>
                  {Object.entries(typeLabels).map(([value, label]) => (
                    <option key={value} value={value}>{label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</label>
                <select
                  value={`${sortBy}-${sortDirection}`}
                  onChange={(e) => {
                    const [field, direction] = e.target.value.split('-');
                    setSortBy(field as any);
                    setSortDirection(direction as "asc" | "desc");
                  }}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700"
                >
                  <option value="updatedAt-desc">–û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</option>
                  <option value="createdAt-desc">–ù–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É</option>
                  <option value="value-desc">–°—É–º–∞: –ø–æ —Å–ø–∞–¥–∞–Ω–Ω—é</option>
                  <option value="value-asc">–°—É–º–∞: –ø–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—é</option>
                </select>
              </div>
            </div>
          </motion.div>
        )}
              </div>

      {/* –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–º–∏–ª–æ–∫ */}
      {loading && (
        <div className="flex items-center justify-center py-8">
          <IconLoader className="h-8 w-8 animate-spin text-blue-500" />
          <span className="ml-2 text-gray-600 dark:text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–≥–æ–¥...</span>
        </div>
      )}

      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <IconAlertCircle className="h-5 w-5 text-red-600 dark:text-red-400" />
            <span className="text-red-800 dark:text-red-200">{error}</span>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="grid grid-cols-1 gap-6">
        {/* –°–ø–∏—Å–æ–∫ —É–≥–æ–¥ */}
              <div>
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <div className="p-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-lg font-medium">
                –£–≥–æ–¥–∏ ({filteredDeals.length})
              </h2>
              </div>

            <div className="space-y-1">
              {filteredDeals.length === 0 ? (
                <div className="p-8 text-center">
                  <IconHome className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600 dark:text-gray-400">–£–≥–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
                </div>
              ) : (
                filteredDeals.map((deal) => (
                  <div
                    key={deal.id}
                    className="p-3 sm:p-4 mb-3 sm:mb-4 rounded-lg bg-card shadow-sm transition-all hover:bg-gray-50 dark:hover:bg-gray-900/20 cursor-pointer"
                    onClick={() => handleViewDeal(deal)}
                  >
                    <div className="flex flex-col sm:flex-row sm:items-center justify-between">
                      <div className="flex items-start space-x-3">
                        <div className="mt-0.5 flex flex-col items-center">
                          <IconFileText className="h-5 w-5 text-blue-500" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <h3 className="font-medium text-base sm:text-lg truncate">{deal.title}</h3>
                          <div className="flex flex-wrap items-center gap-1 sm:gap-2 mt-1">
                            <span className={`px-1.5 sm:px-2 py-0.5 sm:py-1 rounded-full text-xs font-medium ${statusColors[deal.status]}`}>
                              {statusLabels[deal.status]}
                            </span>
                            <span className={`px-1.5 sm:px-2 py-0.5 sm:py-1 rounded-full text-xs font-medium ${priorityColors[deal.priority]}`}>
                              {priorityLabels[deal.priority]}
                            </span>
                          </div>
                          <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3 mt-1 text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                            <div className="flex items-center gap-1 min-w-0">
                              <IconUser className="h-3 w-3 sm:h-3.5 sm:w-3.5 flex-shrink-0" />
                              <span className="truncate">{deal.client}</span>
                            </div>
                            <div className="flex items-center gap-1 min-w-0">
                              <IconHome className="h-3 w-3 sm:h-3.5 sm:w-3.5 flex-shrink-0" />
                              <span className="truncate">{deal.property}</span>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="flex flex-col items-end mt-3 sm:mt-0 text-right min-w-0">
                        <div className="text-base sm:text-lg font-bold text-gray-900 dark:text-white truncate">
                          {formatCurrency(deal.value, deal.currency)}
                        </div>
                        <div className="text-xs sm:text-sm text-gray-600 dark:text-gray-400 truncate">
                          {formatDate(deal.updatedAt)}
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
            {totalPages > 1 && (
              <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                <div className="flex flex-col sm:flex-row items-center justify-between gap-2">
                  <div className="text-xs sm:text-sm text-gray-600 dark:text-gray-400 order-2 sm:order-1">
                    –ü–æ–∫–∞–∑–∞–Ω–æ {filteredDeals.length} –∑ {totalDeals}
                  </div>
                  <div className="flex items-center gap-2 order-1 sm:order-2">
                    <button
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage === 1}
                      className="p-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700"
                    >
                      <IconChevronLeft className="h-4 w-4" />
                    </button>
                    <span className="px-2 sm:px-3 py-2 text-xs sm:text-sm">
                      {currentPage} –∑ {totalPages}
                    </span>
                    <button
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage === totalPages}
                      className="p-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700"
                    >
                      <IconChevronRight className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* –¢—É—Ç —Ä–∞–Ω—ñ—à–µ –±—É–ª–∏ –¥–µ—Ç–∞–ª—ñ —É–≥–æ–¥–∏ - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–∞–ª–∫—É */}
      </div>

      {/* –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ */}
      {showActivityJournal && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"
        >
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-medium">–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</h2>
              <button
                onClick={() => setShowActivityJournal(false)}
                className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                <IconX className="h-5 w-5" />
              </button>
            </div>
          </div>
          
          <div className="p-4">
            <div className="text-center py-8">
              <IconChartBar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600 dark:text-gray-400">
                –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ç—É—Ç
              </p>
        </div>
          </div>
        </motion.div>
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É–≥–æ–¥–∏ */}
      <DealFormModal
        isOpen={showDealModal}
        onClose={() => {
          setShowDealModal(false);
          setEditingDeal(null);
        }}
        onSubmit={handleDealSubmit}
        deal={editingDeal}
        isLoading={loading}
      />

      {/* –ú–æ–¥–∞–ª–∫–∞ –¥–µ—Ç–∞–ª–µ–π —É–≥–æ–¥–∏ */}
      <DealDetailsModal
        isOpen={showDetailsModal}
        onClose={() => {
          setShowDetailsModal(false);
          setSelectedDeal(null);
        }}
        deal={selectedDeal}
      />
      </div>
    );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ç–∞–ª–µ–π —É–≥–æ–¥–∏
interface DealDetailsProps {
  deal: DealDisplay;
  onEdit: () => void;
  onDelete: () => void;
}

function DealDetails({ deal, onEdit, onDelete }: DealDetailsProps) {
  const formatCurrency = (amount: number, currency: string) => {
    const formatter = new Intl.NumberFormat('uk-UA', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    });
    
    const symbols: Record<string, string> = {
      UAH: '‚Ç¥',
      USD: '$',
      EUR: '‚Ç¨',
    };
    
    return `${formatter.format(amount)} ${symbols[currency] || currency}`;
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("uk-UA", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    }).format(date);
  };

  return (
    <div>
      <div className="p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium">–î–µ—Ç–∞–ª—ñ —É–≥–æ–¥–∏</h3>
          <div className="flex items-center gap-2">
            <button
              onClick={onEdit}
              className="p-2 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
            >
              <IconEdit className="h-4 w-4" />
            </button>
            <button
              onClick={onDelete}
              className="p-2 text-gray-400 hover:text-red-600 dark:hover:text-red-400"
            >
              <IconTrash className="h-4 w-4" />
            </button>
          </div>
        </div>
      </div>

      <div className="p-4 space-y-4">
        <div>
          <h4 className="font-medium text-gray-900 dark:text-white mb-2">
            {deal.title}
          </h4>
          <div className="flex items-center gap-2 mb-3">
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[deal.status]}`}>
              {statusLabels[deal.status]}
            </span>
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${priorityColors[deal.priority]}`}>
              {priorityLabels[deal.priority]}
            </span>
          </div>
        </div>

        <div className="space-y-3">
          <div className="flex items-center gap-2">
            <IconCurrencyDollar className="h-4 w-4 text-gray-400" />
            <span className="font-medium">{formatCurrency(deal.value, deal.currency)}</span>
          </div>

          <div className="flex items-center gap-2">
            <IconUser className="h-4 w-4 text-gray-400" />
            <span>{deal.client}</span>
          </div>

          <div className="flex items-center gap-2">
            <IconHome className="h-4 w-4 text-gray-400" />
            <span>{deal.property}</span>
        </div>

          <div className="flex items-center gap-2">
            <IconUser className="h-4 w-4 text-gray-400" />
            <span>–ê–≥–µ–Ω—Ç: {deal.responsibleAgent}</span>
      </div>

          <div className="flex items-center gap-2">
            <IconCalendar className="h-4 w-4 text-gray-400" />
            <span>–°—Ç–≤–æ—Ä–µ–Ω–æ: {formatDate(deal.createdAt)}</span>
          </div>

          <div className="flex items-center gap-2">
            <IconClock className="h-4 w-4 text-gray-400" />
            <span>–û–Ω–æ–≤–ª–µ–Ω–æ: {formatDate(deal.updatedAt)}</span>
          </div>

          {deal.closingDate && (
            <div className="flex items-center gap-2">
              <IconCalendar className="h-4 w-4 text-gray-400" />
              <span>–ó–∞–∫—Ä–∏—Ç—Ç—è: {formatDate(deal.closingDate)}</span>
            </div>
          )}
        </div>

        {deal.description && (
          <div>
            <h5 className="font-medium text-gray-900 dark:text-white mb-2">
              –û–ø–∏—Å
            </h5>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {deal.description}
            </p>
          </div>
        )}
      </div>
    </div>
  );
}